# Generated by Django 5.1.7 on 2025-04-27 19:21

from django.db import migrations

INITIAL_ITEMS = [
    {
        'name': 'Пакет бумажный',
        'description': 'С плоскими ручками, крафт, 350*150*450мм (200шт/кор)',
        'image_url': '/catalog/paket.png',
        'price': 76.00,
        'rating': 5,
        'category_id': 9, # Maps to SubCategory with ID 9
        'quantity': 11,
    },
    {
        'name': 'Упаковка ECO',
        'description': 'ECO OpSalad 800 ламинация (200шт/кор)',
        'image_url': '/catalog/eco.png',
        'price': 92.00,
        'rating': 5,
        'category_id': 9, # Maps to SubCategory with ID 9
        'quantity': 11,
    },
]

def populate_items(apps, schema_editor):
    """
    Inserts the initial set of items using the historical model state.
    """
    Item = apps.get_model('shop', 'ItemModel') # <<<--- REPLACE 'your_app_name'
    db_alias = schema_editor.connection.alias

    for item_data in INITIAL_ITEMS:
        # Create items ensuring the specified ID is used
        Item.objects.using(db_alias).create(**item_data)

    # Note: bulk_create might be less straightforward if you need to guarantee specific PKs
    # across different database backends, but create() usually works.

def unpopulate_items(apps, schema_editor):
    """
    Deletes the items inserted by this migration.
    """
    Item = apps.get_model('shop', 'ItemModel') # <<<--- REPLACE 'your_app_name'
    db_alias = schema_editor.connection.alias

    # Delete based on the IDs we inserted
    item_ids = [i['id'] for i in INITIAL_ITEMS]
    Item.objects.using(db_alias).filter(id__in=item_ids).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('shop', '0003_populate_subcategories'),
    ]

    operations = [
        migrations.RunPython(populate_items, reverse_code=unpopulate_items),
    ]
